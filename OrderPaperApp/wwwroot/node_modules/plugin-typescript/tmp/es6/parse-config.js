import ts from 'typescript';
import Logger from './logger';
var logger = new Logger({ debug: false });
export function parseConfig(config) {
    var result = config || {};
    result.module = getEnum(result.module, ts.ModuleKind, ts.ModuleKind.System);
    result.target = getEnum(result.target, ts.ScriptTarget, ts.ScriptTarget.ES5);
    result.jsx = getEnum(result.jsx, ts.JsxEmit, ts.JsxEmit.None);
    result.allowNonTsExtensions = (result.allowNonTsExtensions !== false);
    result.skipDefaultLibCheck = (result.skipDefaultLibCheck !== false);
    result.noResolve = true;
    result.allowSyntheticDefaultImports = (result.allowSyntheticDefaultImports !== false);
    result.moduleResolution = ts.ModuleResolutionKind.Classic;
    result.types = result.types || [];
    result.typings = result.typings || {};
    if (result.supportHtmlImports) {
        logger.error("The 'supportHtmlImports' option is no longer supported");
        logger.error("Please use TypeScript's new 'wildcard declarations' feature instead");
    }
    if (result.resolveAmbientRefs) {
        logger.error("The 'resolveAmbientRefs' option is no longer supported");
        logger.error("Please use External Typings support instead");
    }
    if (result.targetLib) {
        logger.error("The 'targetLib' option is no longer supported");
        logger.error("Please use the 'lib' option instead");
    }
    if (!result.lib) {
        result.lib = ['es6'];
    }
    return result;
}
function getEnum(enumValue, enumType, defaultValue) {
    if (enumValue == undefined)
        return defaultValue;
    for (var enumProp in enumType) {
        if (enumProp.toLowerCase() === enumValue.toString().toLowerCase()) {
            if (typeof enumType[enumProp] === "string")
                return enumType[enumType[enumProp]];
            else
                return enumType[enumProp];
        }
    }
    throw new Error("Unrecognised value [" + enumValue + "]");
}
